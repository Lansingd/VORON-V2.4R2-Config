# 示例宏配置，旨在与去污染清洗桶和喷嘴擦拭器模块一起使用。由 Hernsl 创建（Discord 上为 hernsl#8860），并由 Edwardyeeks 编辑（Discord 上为 edwardyeeks#6042）。其中多个想法成为了 Deutherius（Discord 上为 deutherius#3295）的一些功能。

# 此宏的目标是提供一个易于复制/引用到您的 printer.cfg 中的喷嘴擦拭和清洗程序。
# 用户只需更改参数并在前半部分启用/禁用选项。描述非常丰富，使得这个宏看起来庞大但信息量大，并按顺序排列，首先描述下面的行；请仔细阅读。

# 此示例配置假设用户已为 VORON 1/2 实施默认的去污染清洗桶和喷嘴擦拭器模块。
# 可以调整以定制清洗桶几何形状和刷子。

# 此宏的特点：可以选择将清洗桶放置在床的后面或前面。清洗程序可以启用/禁用。
# 默认情况下，清洗桶位于床的左后方，并且启用清洗程序。清洗和擦拭程序在左桶或右桶中随机化，
# 以确保尽可能均匀地分布材料残留物。

# 默认参数设置为安全的速度和移动。在必要时，可以调整喷嘴擦拭程序的参数以适应您的打印机。

# 为了避免在主 printer.cfg 配置文件中添加过多行，可以将配置文件单独上传到 Klipper，
# 并将其包含在主打印配置中。将 nozzle_scrub.cfg 上传到与 printer.cfg 相同的目录。通常是在 /home/pi/。
# 使用 Fluidd、Mainsail 和其他 Klipper 前端的用户将在 /home/pi/klipper_config/ 下找到它。

# 上传后，在您的 printer.cfg 的宏部分添加以下内容：[include /home/pi/nozzle_scrub.cfg]
# 使用 Fluidd、Mainsail 和其他前端的用户需要使用以下位置：
# [include /home/pi/klipper_config/nozzle_scrub.cfg]

# 宏的名称是 clean_nozzle.

[gcode_macro clean_nozzle]

# 如果您按照默认安装将清理桶放在床的左后方，请将您的 location_bucket_rear 变量设置为 True。
# 如果您想将清理桶放在其他地方（例如前面），则将其设置为 False。有关如何设置 XY 位置的图示和描述请见下文。
variable_location_bucket_rear:      False

# 如果您希望启用清理例程，请设置为 True（反之亦然）。
variable_enable_purge:              True

# 如果您希望启用热到冷的清理，请设置为 True（反之亦然）。
variable_enable_hotcold:            False

# 这些参数定义了您的耗材清理。retract 变量用于在清理后立即收回，以防止不必要的溢出。
# 一些耗材特别容易溢出，可能在收回后仍会继续从喷嘴溢出一两秒钟。
# ooze dwell 变量为此留出了余地。根据需要进行更新。如果您决定不启用清理，可以忽略此部分。
variable_purge_len:            25	         #; 要吹扫的灯丝量，单位为mm
variable_purge_spd:           200	         #; 吹扫速度，单位为mm/min
variable_purge_temp_min:      140	         #; 允许吹扫的最低喷嘴温度。否则，将不会进行清除。
variable_purge_ret:             5            #; 吹扫后的回缩长度（mm），以防止轻微渗出。根据需要进行调整。
variable_ooze_dwell:            0            #; 吹扫和收回后的停留/等待时间（秒）。


# 调整此参数，以确保喷嘴在刷子内清洁。当前默认值设置得较高以确保安全。注意不要调得太低！
variable_brush_top:            3
variable_brush_deep_max:       0 

#这些参数定义了您的擦洗、行驶速度、安全z间隙以及您要擦拭的次数。必要时更新。
#根据吹扫和擦洗程序中是随机选择左铲斗还是右铲斗，方向是随机的。
variable_clearance_z:        5	         ; 移动但不清洁时，喷嘴和刷子之间沿z轴的间隙。
variable_wipe_qty:           3	         ; 完整（完整刮水：左、右、左或右、左、右）刮水次数。
variable_prep_spd_xy:        14000	         ; 沿x轴和y轴的移动（非清洁）速度，单位为mm/min。
variable_prep_spd_z:         5000	         ; 沿z轴移动（非清洁）速度，单位为mm/min
variable_wipe_spd_xy:        30000	         ;喷嘴擦拭速度（mm/min）。
variable_brush_top:          2

# 这些参数定义了刷子的大小。根据需要进行更新。下面提供了视觉参考。请注意，无论桶放在后面还是前面，参数的方向保持不变。
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     如果您选择 location_bucket_rear = True，Y 位置将根据您的 stepper_y position_max 获取。
#  brush_start (x) |                 | brush_depth            在 Y 方向上物理调整刷子，以确保喷嘴在刷子内清洁。       
#                  |_________________|  ↓                              
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                       打印机前面
# 
# 
## 对于 V1.8，您可能需要测量刷子在 X 轴上的位置并手动输入到任何未注释的 variable_brush_start 中。
## 对于 V2.4 的 250mm 版本，请取消注释以下内容： 
#variable_brush_start:     25	


## 刷子左边X轴坐标
variable_brush_start:    200

## For V2.4 350mm build, uncomment this below:
#variable_brush_start:     75

# 刷子长度
variable_brush_width:      52	

## 刷子Y轴坐标
variable_brush_front:     300       
variable_brush_depth:      9        
variable_brush_segments:   20          

# 这些参数定义了您的清洗桶的大小。根据需要进行更新。如果您决定不启用清洗，可以忽略此部分。下面提供了视觉参考。请注意，无论桶放在后面还是前面，参数的方向保持不变。
# 
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    打印机前面
## 对于 V2.4 的 250mm 版本，请取消注释以下内容 
#variable_bucket_left_width:    42	


## 左边料盒的宽度
variable_bucket_left_width:  35

## For V2.4 350mm build, uncomment below
#variable_bucket_left_width:    92   

# These values are defaulted from bucket geometry in CAD (rear left location). Change only if you're using a custom bucket.
variable_bucket_right_width:   62    #右边边料盒的宽度           
variable_bucket_gap:           21	  #料盒中间的宽度

# For V1.8, you may need to measure where your bucket start is and input into bucket_start. Otherwise, a value of 0 is for a default
# 料盒左边边缘的坐标  
variable_bucket_start: 175


###############################################################################################################################################
###############################################################################################################################################


##从这里开始，除非您知道自己在做什么，否则建议不要更改任何内容。请随意浏览代码，如果您发现任何问题，可以在 Discord 上联系我（edwardyeeks#6042）！

###############################################################################################################################################
###############################################################################################################################################

# Placeholder. The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:            1	        

gcode:
   # First, check if the axes are homed.
   {% if "xyz" in printer.toolhead.homed_axes %}

      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=clean_nozzle

      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Check if user enabled purge option or not.
      {% if enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
      {% endif %}

      {% endif %}

      ## Set wipe backoffice
      {% set brush_step = brush_width / brush_segments %}
      {% set brush_lanes = [ brush_front, brush_front+brush_depth/3, brush_front+brush_depth/3*2, brush_front+brush_depth ] %}
      {% set brush_zhop  = (brush_top - brush_deep_max) /5 %}
      {% set brush_hops  = [ brush_top, brush_top-brush_zhop, brush_top-brush_zhop*2, brush_top-brush_zhop*3, brush_top-brush_zhop*4, brush_top-brush_zhop*5 ] %}

      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}

      ## Check if user chose to use rear location.
      {% if location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{brush_front + (brush_depth / 2)}
      {% endif %}

      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
   
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      G1 F{wipe_spd_xy}
      SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=True
      {% for wipes in range(1, (wipe_qty + 1)) %}
          {%for segments in range(1, (brush_segments+1)) %}
              _clean_nozzle_move X={brush_start + brush_width*bucket_pos + (1-2*bucket_pos)*brush_step*segments } Y={brush_lanes[range(4)|random]} Z={brush_hops[range(6)|random]}
          {% endfor %}
          {%for segments in range(1, (brush_segments+1)) %}
              _clean_nozzle_move X={brush_start + brush_width*(1-bucket_pos) - (1-2*bucket_pos)*brush_step*segments } Y={brush_lanes[range(4)|random]} Z={brush_hops[range(6)|random]}
          {% endfor %}
          {% if enable_hotcold == True %}
              _clean_nozzle_cooldown_check
          {% endif %}
      {% endfor %}

   
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G91
      G1 X{bucket_left_width / 4} F{prep_spd_xy} 

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=clean_nozzle

   {% else %}

      ## raise error will stop any macros that clean_nozzle is referenced in from proceeding for safety.
      { action_raise_error("Please home your axes!") }
      M117 Please home first!

   {% endif %}


###############################################################################################################################################
###############################################################################################################################################

[gcode_macro _clean_nozzle_move]
variable_move: True
gcode:
    
    {% if move == True %}
          {% set x = params.X %}
          {% set y = params.Y %}
          {% set z = params.Z %}
          G1 X{x} Y{y} Z{z}
    {% endif %}

[gcode_macro  _clean_nozzle_cooldown_check]
gcode:
  {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
  {% set extruder_target = printer[printer.toolhead.extruder].target %}
  {% if extruder_temperature <= extruder_target %}
        SET_GCODE_VARIABLE MACRO=_clean_nozzle_move  VARIABLE=move VALUE=False
  {% endif %}

###############################################################################################################################################
###############################################################################################################################################

[gcode_macro CLEAN_HOTCOLD]
variable_temperature_offset:   30 
gcode:
    {% set extruder_target = printer[printer.toolhead.extruder].target %}
    {% set extruder_temperature = printer[printer.toolhead.extruder].temperature %}
    {% set cooltemp_target = extruder_target - temperature_offset %}
    {% set min_extrude_temp = printer.configfile.settings.extruder.min_extrude_temp %}
    {% if extruder_target >= min_extrude_temp and extruder_temperature >= min_extrude_temp %}
        SAVE_GCODE_STATE NAME=STATE_CLEAN
        SET_GCODE_OFFSET Z=0.0                                                        ; reset the G-Code Z offset (adjust Z offset if needed)
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=100            ; do enough wipes so the nozzle has time to cool down
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=False      ; no purge
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_hotcold VALUE=True     ; hot to cold cleaning
        M109 S{extruder_target}                                                       ; wait for extruder to reach the target temperature
        M104 S{cooltemp_target}                                                       ; cool down during wipes to prevent oozing after wipes
        M106 S256                                                                     ; set fan speed to max to help cooling
        G4 P{10 * 1000}                                                               ; dwell time to spare nozzle a bit
        CLEAN_NOZZLE                                                                  ; start cleaning
        M106 S0                                                                       ; stop part cooling fan
        SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_hotcold VALUE=False    ; hot to cold cleaning off
        RESTORE_GCODE_STATE NAME=STATE_CLEAN
    {% endif %}

[gcode_macro CLEAN_PURGE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=5
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=100
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro CLEAN_PRIME]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=5
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=True
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=purge_len VALUE=25
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN

[gcode_macro CLEAN_NOPURGE]
gcode:
    SAVE_GCODE_STATE NAME=STATE_CLEAN
    SET_GCODE_OFFSET Z=0.0  
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=wipe_qty VALUE=3
    SET_GCODE_VARIABLE MACRO=clean_nozzle  VARIABLE=enable_purge VALUE=False
    CLEAN_NOZZLE
    RESTORE_GCODE_STATE NAME=STATE_CLEAN